'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Share2,
  MessageCircle,
  Hash,
  Facebook,
  Twitter,
  Linkedin,
  Copy,
  Check,
  Trophy,
  Users
} from 'lucide-react';
import { socialShare, type ShareContent, type ShareStats } from '@/lib/socialShare';
import type { DreamAnalysis } from '@/lib/dreamAI';

interface SocialShareProps {
  dreamResult?: DreamAnalysis;
  dream?: string;
  gameData?: {
    type: 'xiaoren' | 'shanbao';
    score: number;
    totalScore: number;
  };
  trigger?: React.ReactNode;
}

export default function SocialShare({ dreamResult, dream, gameData, trigger }: SocialShareProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [shareContent, setShareContent] = useState<ShareContent | null>(null);
  const [copiedContent, setCopiedContent] = useState<string | null>(null);
  const [isSharing, setIsSharing] = useState<string | null>(null);
  const [shareStats, setShareStats] = useState<ShareStats>(socialShare.getShareStats());

  // 生成分享内容
  const generateShareContent = () => {
    if (dreamResult && dream) {
      return socialShare.generateDreamShareContent(dreamResult, dream);
    } else if (gameData) {
      return socialShare.generateGameShareContent(gameData.type, gameData.score, gameData.totalScore);
    }
    return null;
  };

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open);
    if (open) {
      const content = generateShareContent();
      setShareContent(content);
      setShareStats(socialShare.getShareStats());
    }
  };

  const handleShare = async (platform: string) => {
    if (!shareContent) return;

    setIsSharing(platform);
    let success = false;

    try {
      switch (platform) {
        case 'wechat':
          success = await socialShare.shareToWeChat(shareContent);
          break;
        case 'weibo':
          success = await socialShare.shareToWeibo(shareContent);
          break;
        case 'facebook':
          success = await socialShare.shareToFacebook(shareContent);
          break;
        case 'twitter':
          success = await socialShare.shareToTwitter(shareContent);
          break;
        case 'linkedin':
          success = await socialShare.shareToLinkedIn(shareContent);
          break;
        case 'native':
          success = await socialShare.shareNative(shareContent);
          break;
        case 'copy':
          success = await socialShare.copyShareLink(shareContent);
          if (success) {
            setCopiedContent(platform);
            setTimeout(() => setCopiedContent(null), 2000);
          }
          break;
      }

      if (success) {
        // 更新统计
        setShareStats(socialShare.getShareStats());
      }
    } catch (error) {
      console.error(`分享到${platform}失败:`, error);
    } finally {
      setIsSharing(null);
    }
  };

  const platforms = [
    {
      id: 'wechat',
      name: '微信',
      icon: MessageCircle,
      color: 'bg-green-500 hover:bg-green-600',
      description: '分享到微信好友或朋友圈'
    },
    {
      id: 'weibo',
      name: '微博',
      icon: Hash,
      color: 'bg-red-500 hover:bg-red-600',
      description: '分享到新浪微博'
    },
    {
      id: 'facebook',
      name: 'Facebook',
      icon: Facebook,
      color: 'bg-blue-600 hover:bg-blue-700',
      description: '分享到Facebook'
    },
    {
      id: 'twitter',
      name: 'Twitter',
      icon: Twitter,
      color: 'bg-sky-500 hover:bg-sky-600',
      description: '分享到Twitter'
    },
    {
      id: 'linkedin',
      name: 'LinkedIn',
      icon: Linkedin,
      color: 'bg-blue-700 hover:bg-blue-800',
      description: '分享到LinkedIn'
    },
    {
      id: 'copy',
      name: '复制链接',
      icon: copiedContent === 'copy' ? Check : Copy,
      color: copiedContent === 'copy'
        ? 'bg-green-500 hover:bg-green-600'
        : 'bg-gray-600 hover:bg-gray-700',
      description: '复制分享链接和文案'
    }
  ];

  // 检测是否支持原生分享
  const supportsNativeShare = typeof navigator !== 'undefined' && navigator.share;

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        {trigger || (
          <Button variant="outline" size="sm">
            <Share2 className="h-4 w-4 mr-1" />
            分享
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Share2 className="h-5 w-5" />
            分享到社交媒体
          </DialogTitle>
          <DialogDescription>
            {dreamResult ? '分享您的解梦结果' : '分享您的游戏成就'}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* 分享内容预览 */}
          {shareContent && (
            <div className="p-4 bg-gray-50 rounded-lg">
              <h4 className="font-bold text-sm mb-2">分享内容预览</h4>
              <div className="text-sm space-y-2">
                <p className="font-semibold">{shareContent.title}</p>
                <p className="text-gray-600 line-clamp-3">{shareContent.text}</p>
                <div className="flex flex-wrap gap-1">
                  {shareContent.hashtags.slice(0, 4).map((tag, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      #{tag}
                    </Badge>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* 分享统计 */}
          {shareStats.totalShares > 0 && (
            <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
              <div className="flex items-center gap-2">
                <Users className="h-4 w-4 text-blue-600" />
                <span className="text-sm font-medium">已分享 {shareStats.totalShares} 次</span>
              </div>
              {shareStats.achievements.length > 0 && (
                <div className="flex items-center gap-1">
                  <Trophy className="h-4 w-4 text-yellow-600" />
                  <Badge variant="secondary" className="text-xs">
                    {shareStats.achievements.length} 个成就
                  </Badge>
                </div>
              )}
            </div>
          )}

          {/* 原生分享按钮（移动端） */}
          {supportsNativeShare && (
            <Button
              onClick={() => handleShare('native')}
              disabled={isSharing === 'native'}
              className="w-full bg-purple-600 hover:bg-purple-700"
            >
              <Share2 className="h-4 w-4 mr-2" />
              {isSharing === 'native' ? '分享中...' : '快速分享'}
            </Button>
          )}

          {/* 社交平台按钮 */}
          <div className="grid grid-cols-2 gap-3">
            {platforms.map((platform) => {
              const Icon = platform.icon;
              const isLoading = isSharing === platform.id;
              const isCopied = copiedContent === platform.id;

              return (
                <Button
                  key={platform.id}
                  onClick={() => handleShare(platform.id)}
                  disabled={isLoading}
                  className={`${platform.color} text-white flex flex-col items-center gap-1 h-auto py-3`}
                >
                  <Icon className="h-5 w-5" />
                  <span className="text-xs">
                    {isLoading ? '分享中...' : isCopied ? '已复制' : platform.name}
                  </span>
                </Button>
              );
            })}
          </div>

          {/* 分享提示 */}
          <div className="text-center text-xs text-gray-500">
            <p>💡 分享给朋友，一起体验香港解梦文化</p>
            <p>每次分享都能解锁新的成就！</p>
          </div>

          {/* 成就展示 */}
          {shareStats.achievements.length > 0 && (
            <div className="space-y-2">
              <h4 className="font-bold text-sm flex items-center gap-1">
                <Trophy className="h-4 w-4 text-yellow-600" />
                分享成就
              </h4>
              <div className="flex flex-wrap gap-2">
                {shareStats.achievements.map((achievement) => (
                  <Badge key={achievement} variant="secondary" className="text-xs">
                    {socialShare.getAchievementTitle(achievement)}
                  </Badge>
                ))}
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
